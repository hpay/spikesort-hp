function [amplifier_data, h, dig_data] = readIntanPerType(filepath, tduration, tstart, notch_filter_frequency, option_digital_only)
% readIntanPerType
%
% based on read_Intan_RHD2000_file, edited by Hannah Payne, Aronov lab
%
% Version 3.00, 18 April 2018
%
% Reads Intan Technologies RHD2000 data file generated by evaluation board
% GUI or Intan Recording Controller.
%
% Returns the raw data in matrix form (n sample x n channels)

if ~exist('option_digital_only','var')
    option_digital_only = 0;
end

if ~exist('filepath','var')
    [filepath] = ...
        uigetdir('Select a folder with single file per data type data');
    if (filepath == 0);  return; end
    
end

% Open the info file
info_filepath = fullfile(filepath,'info.rhd');
fprintf('Opening info file %s\n',info_filepath)
h = readIntanInfo(info_filepath);
nchannels = h.num_h.amplifier_channels;
ndig_in = h.num_h.board_dig_in_channels;

amplifier_data = [];
if ~option_digital_only
    
    % Open the amplifier data
    amp_filepath = fullfile(filepath,'amplifier.dat');
    fid = fopen(amp_filepath,'r');
    
    % Get the total number of time point samples
    fileinfo = dir(amp_filepath);
    num_samples = fileinfo.bytes/(nchannels * 2); % int16 = 2 bytes
    
    % Change start time if needed
    if exist('tstart','var') && ~isempty(tstart)
        ind_start = round(tstart*h.sample_rate);
        fseek(fid, ind_start*2*nchannels, 'bof');
        num_samples = num_samples - ind_start; % CHECK THIS
    end
    
    % Change the duration to read if needed
    if exist('tduration','var') && ~isempty(tduration)
        num_samples= round(tduration*h.sample_rate);
    end
    
    % Read the data. To convert to electrode voltage in microvolts, multiply by 0.195.
    amplifier_data = fread(fid, [nchannels, num_samples], 'int16')*0.195;
    fclose(fid);
    
    
    % Add notch frequency
    if exist('notch_filter_frequency','var') && ~isempty(notch_filter_frequency) && (notch_filter_frequency > 0)
        fprintf(1, 'Applying notch filter...\n');
        bandwidth = 10; % Hz
        for ii = 1:h.num_h.amplifier_channels
            amplifier_data(ii,:) = notch_filter(amplifier_data(ii,:), h.sample_rate, notch_filter_frequency, bandwidth);
        end
    end
    
    
end

if ndig_in
    % Open the digital data
    dig_filepath = fullfile(filepath,'digitalin.dat');
    fid = fopen(dig_filepath, 'r');
    
    % Get the total number of time point samples
    fileinfo = dir(dig_filepath);
    num_samples = fileinfo.bytes/2; % uint16 = 2 bytes
    
    % Change start time if needed
    if exist('tstart','var') && ~isempty(tstart)
        ind_start = round(tstart*h.sample_rate);
        fseek(fid, ind_start*2, 'bof');
        num_samples = num_samples - ind_start;
    end
    
    % Change the duration to read if needed
    if exist('tduration','var') && ~isempty(tduration)
        num_samples = round(tduration*h.sample_rate);
    end
    
    digital_word = fread(fid, num_samples, 'uint16');
    fclose(fid);
    
    % Individual digital inputs can be isolated using the bitand function in MATLAB:
    % digital_input_ch = (bitand(digital_word, 2^ch) > 0); % ch has a value of 0-15 here
    dig_data = false(ndig_in, length(digital_word));
    for ii = 1:ndig_in
        ch = h.board_dig_in_channels(ii).native_order;
        dig_data(ii,:) = (bitand(digital_word, 2^ch) > 0);
    end
end