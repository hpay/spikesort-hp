function D = readIntanRHD(filename, notch_filter_frequency)
% readIntanSingleRHD
%
% based on read_Intan_RHD2000_file, edited by Hannah Payne, Aronov lab
%
% Version 3.00, 18 April 2018
%
% Reads Intan Technologies RHD2000 data file generated by evaluation board
% GUI or Intan Recording Controller.  Data are parsed and placed into
% variables that appear in the base MATLAB workspace.  Therefore, it is
% recommended to execute a 'clear' command before running this program to
% clear all other variables from the base workspace.
%
% Example:
% >> clear
% >> readIntan
% >> whos
% >> h.amplifier_channels(1)
% >> plot(t_amplifier, amplifier_data(1,:))
% 


if ~exist('filename','var')
    [file, path] = ...
        uigetfile('*.rhd', 'Select an RHD2000 Data File', 'MultiSelect', 'off');
    if (file == 0);  return; end
else
    [path, file, ext] = fileparts(filename);
    if isempty(ext); ext = '.rhd'; end
    file = [file ext];
end

% Set a software 50/60 Hz notch filter with input notch_filter_frequency
if ~exist('notch_filter_frequency','var')
    notch_filter_frequency = 0;
end

% Open the file
tic;
filename = fullfile(path,file);
fprintf('Opening file %s\n',filename)
fid = fopen(filename, 'r');

if fid<1; warning('Failed to open file'); return; end

s = dir(filename);
filesize = s.bytes;

% Check 'magic number' at beginning of file to make sure this is an Intan
% Technologies RHD2000 data file.
h.magic_number = fread(fid, 1, 'uint32');
if h.magic_number ~= hex2dec('c6912702')
    error('Unrecognized file type.');
end

% Read version number.
h.data_file_main_version_number = fread(fid, 1, 'int16');
h.data_file_secondary_version_number = fread(fid, 1, 'int16');

fprintf(1, '\n');
fprintf(1, 'Reading Intan Technologies RHD2000 Data File, Version %d.%d\n', ...
    h.data_file_main_version_number, h.data_file_secondary_version_number);
fprintf(1, '\n');

if (h.data_file_main_version_number == 1)
    num_samples_per_data_block = 60;
else
    num_samples_per_data_block = 128;
end

% Read information of sampling rate and amplifier frequency settings.
h.sample_rate = fread(fid, 1, 'single');
h.dsp_enabled = fread(fid, 1, 'int16');
h.actual_dsp_cutoff_frequency = fread(fid, 1, 'single');
h.actual_lower_bandwidth = fread(fid, 1, 'single');
h.actual_upper_bandwidth = fread(fid, 1, 'single');

h.desired_dsp_cutoff_frequency = fread(fid, 1, 'single');
h.desired_lower_bandwidth = fread(fid, 1, 'single');
h.desired_upper_bandwidth = fread(fid, 1, 'single');

% This tells us if a software 50/60 Hz notch filter was enabled during
% the data acquisition.
h.notch_filter_mode = fread(fid, 1, 'int16');

h.desired_impedance_test_frequency = fread(fid, 1, 'single');
h.actual_impedance_test_frequency = fread(fid, 1, 'single');

% Place notes in data strucure
h.notes = struct( ...
    'note1', fread_QString(fid), ...
    'note2', fread_QString(fid), ...
    'note3', fread_QString(fid) );
    
% If data file is from GUI v1.1 or later, see if temperature sensor data
% was saved.
h.num_temp_sensor_channels = 0;
if ((h.data_file_main_version_number == 1 && h.data_file_secondary_version_number >= 1) ...
    || (h.data_file_main_version_number > 1))
    h.num_temp_sensor_channels = fread(fid, 1, 'int16');
end

% If data file is from GUI v1.3 or later, load eval board mode.
h.eval_board_mode = 0;
if ((h.data_file_main_version_number == 1 && h.data_file_secondary_version_number >= 3) ...
    || (h.data_file_main_version_number > 1))
    h.eval_board_mode = fread(fid, 1, 'int16');
end

% If data file is from v2.0 or later (Intan Recording Controller),
% load name of digital reference channel.
if (h.data_file_main_version_number > 1)
    h.reference_channel = fread_QString(fid);
end

% Place frequency-related information in data structure.
frequency_parameters = struct( ...
    'amplifier_sample_rate', h.sample_rate, ...
    'aux_input_sample_rate', h.sample_rate / 4, ...
    'supply_voltage_sample_rate', h.sample_rate / num_samples_per_data_block, ...
    'board_adc_sample_rate', h.sample_rate, ...
    'board_dig_in_sample_rate', h.sample_rate, ...
    'desired_dsp_cutoff_frequency', h.desired_dsp_cutoff_frequency, ...
    'actual_dsp_cutoff_frequency', h.actual_dsp_cutoff_frequency, ...
    'dsp_enabled', h.dsp_enabled, ...
    'desired_lower_bandwidth', h.desired_lower_bandwidth, ...
    'actual_lower_bandwidth', h.actual_lower_bandwidth, ...
    'desired_upper_bandwidth', h.desired_upper_bandwidth, ...
    'actual_upper_bandwidth', h.actual_upper_bandwidth, ...
    'notch_filter_frequency', notch_filter_frequency, ...
    'desired_impedance_test_frequency', h.desired_impedance_test_frequency, ...
    'actual_impedance_test_frequency', h.actual_impedance_test_frequency );

% Define data structure for spike trigger settings.
spike_trigger_struct = struct( ...
    'voltage_trigger_mode', {}, ...
    'voltage_threshold', {}, ...
    'digital_trigger_channel', {}, ...
    'digital_edge_polarity', {} );

new_trigger_channel = struct(spike_trigger_struct);
h.spike_triggers = struct(spike_trigger_struct);

% Define data structure for data channels.
channel_struct = struct( ...
    'native_channel_name', {}, ...
    'custom_channel_name', {}, ...
    'native_order', {}, ...
    'custom_order', {}, ...
    'board_stream', {}, ...
    'chip_channel', {}, ...
    'port_name', {}, ...
    'port_prefix', {}, ...
    'port_number', {}, ...
    'electrode_impedance_magnitude', {}, ...
    'electrode_impedance_phase', {} );

new_channel = struct(channel_struct);

% Create structure arrays for each type of data channel.
h.amplifier_channels = struct(channel_struct);
h.aux_input_channels = struct(channel_struct);
h.supply_voltage_channels = struct(channel_struct);
h.board_adc_channels = struct(channel_struct);
h.board_dig_in_channels = struct(channel_struct);
h.board_dig_out_channels = struct(channel_struct);

amplifier_index = 1;
aux_input_index = 1;
supply_voltage_index = 1;
board_adc_index = 1;
board_dig_in_index = 1;
board_dig_out_index = 1;

% Read signal summary from data file header.

h.number_of_signal_groups = fread(fid, 1, 'int16');

for signal_group = 1:h.number_of_signal_groups
    signal_group_name = fread_QString(fid);
    signal_group_prefix = fread_QString(fid);
    signal_group_enabled = fread(fid, 1, 'int16');
    signal_group_num_channels = fread(fid, 1, 'int16');
    signal_group_num_amp_channels = fread(fid, 1, 'int16');

    if (signal_group_num_channels > 0 && signal_group_enabled > 0)
        new_channel(1).port_name = signal_group_name;
        new_channel(1).port_prefix = signal_group_prefix;
        new_channel(1).port_number = signal_group;
        for signal_channel = 1:signal_group_num_channels
            new_channel(1).native_channel_name = fread_QString(fid);
            new_channel(1).custom_channel_name = fread_QString(fid);
            new_channel(1).native_order = fread(fid, 1, 'int16');
            new_channel(1).custom_order = fread(fid, 1, 'int16');
            signal_type = fread(fid, 1, 'int16');
            channel_enabled = fread(fid, 1, 'int16');
            new_channel(1).chip_channel = fread(fid, 1, 'int16');
            new_channel(1).board_stream = fread(fid, 1, 'int16');
            new_trigger_channel(1).voltage_trigger_mode = fread(fid, 1, 'int16');
            new_trigger_channel(1).voltage_threshold = fread(fid, 1, 'int16');
            new_trigger_channel(1).digital_trigger_channel = fread(fid, 1, 'int16');
            new_trigger_channel(1).digital_edge_polarity = fread(fid, 1, 'int16');
            new_channel(1).electrode_impedance_magnitude = fread(fid, 1, 'single');
            new_channel(1).electrode_impedance_phase = fread(fid, 1, 'single');
            
            if (channel_enabled)
                switch (signal_type)
                    case 0
                        h.amplifier_channels(amplifier_index) = new_channel;
                        h.spike_triggers(amplifier_index) = new_trigger_channel;
                        amplifier_index = amplifier_index + 1;
                    case 1
                        h.aux_input_channels(aux_input_index) = new_channel;
                        aux_input_index = aux_input_index + 1;
                    case 2
                        h.supply_voltage_channels(supply_voltage_index) = new_channel;
                        supply_voltage_index = supply_voltage_index + 1;
                    case 3
                        h.board_adc_channels(board_adc_index) = new_channel;
                        board_adc_index = board_adc_index + 1;
                    case 4
                        h.board_dig_in_channels(board_dig_in_index) = new_channel;
                        board_dig_in_index = board_dig_in_index + 1;
                    case 5
                        h.board_dig_out_channels(board_dig_out_index) = new_channel;
                        board_dig_out_index = board_dig_out_index + 1;
                    otherwise
                        error('Unknown channel type');
                end
            end
            
        end
    end
end

% Summarize contents of data file.
num_h.amplifier_channels = amplifier_index - 1;
num_h.aux_input_channels = aux_input_index - 1;
num_h.supply_voltage_channels = supply_voltage_index - 1;
num_h.board_adc_channels = board_adc_index - 1;
num_h.board_dig_in_channels = board_dig_in_index - 1;
num_h.board_dig_out_channels = board_dig_out_index - 1;
h.num_h = num_h;

fprintf(1, 'Found %d amplifier channel%s.\n', ...
    num_h.amplifier_channels, plural(num_h.amplifier_channels));
fprintf(1, 'Found %d auxiliary input channel%s.\n', ...
    num_h.aux_input_channels, plural(num_h.aux_input_channels));
fprintf(1, 'Found %d supply voltage channel%s.\n', ...
    num_h.supply_voltage_channels, plural(num_h.supply_voltage_channels));
fprintf(1, 'Found %d board ADC channel%s.\n', ...
    num_h.board_adc_channels, plural(num_h.board_adc_channels));
fprintf(1, 'Found %d board digital input channel%s.\n', ...
    num_h.board_dig_in_channels, plural(num_h.board_dig_in_channels));
fprintf(1, 'Found %d board digital output channel%s.\n', ...
    num_h.board_dig_out_channels, plural(num_h.board_dig_out_channels));
fprintf(1, 'Found %d temperature sensor channel%s.\n', ...
    h.num_temp_sensor_channels, plural(h.num_temp_sensor_channels));
fprintf(1, '\n');

% Determine how many samples the data file contains.

% Each data block contains num_samples_per_data_block amplifier samples.
bytes_per_block = num_samples_per_data_block * 4;  % timestamp data
bytes_per_block = bytes_per_block + num_samples_per_data_block * 2 * num_h.amplifier_channels;
% Auxiliary inputs are sampled 4x slower than amplifiers
bytes_per_block = bytes_per_block + (num_samples_per_data_block / 4) * 2 * num_h.aux_input_channels;
% Supply voltage is sampled once per data block
bytes_per_block = bytes_per_block + 1 * 2 * num_h.supply_voltage_channels;
% Board analog inputs are sampled at same rate as amplifiers
bytes_per_block = bytes_per_block + num_samples_per_data_block * 2 * num_h.board_adc_channels;
% Board digital inputs are sampled at same rate as amplifiers
if (num_h.board_dig_in_channels > 0)
    bytes_per_block = bytes_per_block + num_samples_per_data_block * 2;
end
% Board digital outputs are sampled at same rate as amplifiers
if (num_h.board_dig_out_channels > 0)
    bytes_per_block = bytes_per_block + num_samples_per_data_block * 2;
end
% Temp sensor is sampled once per data block
if (h.num_temp_sensor_channels > 0)
   bytes_per_block = bytes_per_block + 1 * 2 * h.num_temp_sensor_channels; 
end

% How many data blocks remain in this file?
data_present = 0;
bytes_remaining = filesize - ftell(fid);
if (bytes_remaining > 0)
    data_present = 1;
end

num_data_blocks = bytes_remaining / bytes_per_block;

num_amplifier_samples = num_samples_per_data_block * num_data_blocks;
num_aux_input_samples = (num_samples_per_data_block / 4) * num_data_blocks;
num_supply_voltage_samples = 1 * num_data_blocks;
num_board_adc_samples = num_samples_per_data_block * num_data_blocks;
num_board_dig_in_samples = num_samples_per_data_block * num_data_blocks;
num_board_dig_out_samples = num_samples_per_data_block * num_data_blocks;

record_time = num_amplifier_samples / h.sample_rate;

if (data_present)
    fprintf(1, 'File contains %0.3f seconds of data.  Amplifiers were sampled at %0.2f kS/s.\n', ...
        record_time, h.sample_rate / 1000);
    fprintf(1, '\n');
else
    fprintf(1, 'Header file contains no data.  Amplifiers were sampled at %0.2f kS/s.\n', ...
        h.sample_rate / 1000);
    fprintf(1, '\n');
end

if (data_present)
    
    % Pre-allocate memory for data.
    fprintf(1, 'Allocating memory for data...\n');

    t_amplifier = zeros(1, num_amplifier_samples);

    amplifier_data = zeros(num_h.amplifier_channels, num_amplifier_samples);
    aux_input_data = zeros(num_h.aux_input_channels, num_aux_input_samples);
    supply_voltage_data = zeros(num_h.supply_voltage_channels, num_supply_voltage_samples);
    temp_sensor_data = zeros(h.num_temp_sensor_channels, num_supply_voltage_samples);
    board_adc_data = zeros(num_h.board_adc_channels, num_board_adc_samples);
    board_dig_in_data = zeros(num_h.board_dig_in_channels, num_board_dig_in_samples);
    board_dig_in_raw = zeros(1, num_board_dig_in_samples);
    board_dig_out_data = zeros(num_h.board_dig_out_channels, num_board_dig_out_samples);
    board_dig_out_raw = zeros(1, num_board_dig_out_samples);

    % Read sampled data from file.
    fprintf(1, 'Reading data from file...\n');

    amplifier_index = 1;
    aux_input_index = 1;
    supply_voltage_index = 1;
    board_adc_index = 1;
    board_dig_in_index = 1;
    board_dig_out_index = 1;

    print_increment = 10;
    percent_done = print_increment;
    for i=1:num_data_blocks
        % In version 1.2, we moved from saving timestamps as unsigned
        % integeters to signed integers to accomidate negative (adjusted)
        % timestamps for pretrigger data.
        if ((h.data_file_main_version_number == 1 && h.data_file_secondary_version_number >= 2) ...
        || (h.data_file_main_version_number > 1))
            t_amplifier(amplifier_index:(amplifier_index + num_samples_per_data_block - 1)) = fread(fid, num_samples_per_data_block, 'int32');
        else
            t_amplifier(amplifier_index:(amplifier_index + num_samples_per_data_block - 1)) = fread(fid, num_samples_per_data_block, 'uint32');
        end
        if (num_h.amplifier_channels > 0)
            amplifier_data(:, amplifier_index:(amplifier_index + num_samples_per_data_block - 1)) = fread(fid, [num_samples_per_data_block, num_h.amplifier_channels], 'uint16')';
        end
        if (num_h.aux_input_channels > 0)
            aux_input_data(:, aux_input_index:(aux_input_index + (num_samples_per_data_block / 4) - 1)) = fread(fid, [(num_samples_per_data_block / 4), num_h.aux_input_channels], 'uint16')';
        end
        if (num_h.supply_voltage_channels > 0)
            supply_voltage_data(:, supply_voltage_index) = fread(fid, [1, num_h.supply_voltage_channels], 'uint16')';
        end
        if (h.num_temp_sensor_channels > 0)
            temp_sensor_data(:, supply_voltage_index) = fread(fid, [1, h.num_temp_sensor_channels], 'int16')';
        end
        if (num_h.board_adc_channels > 0)
            board_adc_data(:, board_adc_index:(board_adc_index + num_samples_per_data_block - 1)) = fread(fid, [num_samples_per_data_block, num_h.board_adc_channels], 'uint16')';
        end
        if (num_h.board_dig_in_channels > 0)
            board_dig_in_raw(board_dig_in_index:(board_dig_in_index + num_samples_per_data_block - 1)) = fread(fid, num_samples_per_data_block, 'uint16');
        end
        if (num_h.board_dig_out_channels > 0)
            board_dig_out_raw(board_dig_out_index:(board_dig_out_index + num_samples_per_data_block - 1)) = fread(fid, num_samples_per_data_block, 'uint16');
        end

        amplifier_index = amplifier_index + num_samples_per_data_block;
        aux_input_index = aux_input_index + (num_samples_per_data_block / 4);
        supply_voltage_index = supply_voltage_index + 1;
        board_adc_index = board_adc_index + num_samples_per_data_block;
        board_dig_in_index = board_dig_in_index + num_samples_per_data_block;
        board_dig_out_index = board_dig_out_index + num_samples_per_data_block;

        fraction_done = 100 * (i / num_data_blocks);
        if (fraction_done >= percent_done)
            fprintf(1, '%d%% done...\n', percent_done);
            percent_done = percent_done + print_increment;
        end
    end

    % Make sure we have read exactly the right amount of data.
    bytes_remaining = filesize - ftell(fid);
    if (bytes_remaining ~= 0)
        error('Error: End of file not reached.');
    end

end

% Close data file.
fclose(fid);

if (data_present)
    
    fprintf(1, 'Parsing data...\n');

    % Extract digital input channels to separate variables.
    for i=1:num_h.board_dig_in_channels
       mask = 2^(h.board_dig_in_channels(i).native_order) * ones(size(board_dig_in_raw));
       board_dig_in_data(i, :) = (bitand(board_dig_in_raw, mask) > 0);
    end
    for i=1:num_h.board_dig_out_channels
       mask = 2^(h.board_dig_out_channels(i).native_order) * ones(size(board_dig_out_raw));
       board_dig_out_data(i, :) = (bitand(board_dig_out_raw, mask) > 0);
    end

    % Scale voltage levels appropriately.
    amplifier_data = 0.195 * (amplifier_data - 32768); % units = microvolts
    aux_input_data = 37.4e-6 * aux_input_data; % units = volts
    supply_voltage_data = 74.8e-6 * supply_voltage_data; % units = volts
    if (h.eval_board_mode == 1)
        board_adc_data = 152.59e-6 * (board_adc_data - 32768); % units = volts
    elseif (h.eval_board_mode == 13) % Intan Recording Controller
        board_adc_data = 312.5e-6 * (board_adc_data - 32768); % units = volts    
    else
        board_adc_data = 50.354e-6 * board_adc_data; % units = volts
    end
    temp_sensor_data = temp_sensor_data / 100; % units = deg C

    % Check for gaps in timestamps.
    num_gaps = sum(diff(t_amplifier) ~= 1);
    if (num_gaps == 0)
        fprintf(1, 'No missing timestamps in data.\n');
    else
        fprintf(1, 'Warning: %d gaps in timestamp data found.  Time scale will not be uniform!\n', ...
            num_gaps);
    end

    % Scale time steps (units = seconds).
    t_amplifier = t_amplifier / h.sample_rate;
    t_aux_input = t_amplifier(1:4:end);
    t_supply_voltage = t_amplifier(1:num_samples_per_data_block:end);
    t_board_adc = t_amplifier;
    t_dig = t_amplifier;
    t_temp_sensor = t_supply_voltage;

    % If the software notch filter was selected during the recording, apply the
    % same notch filter to amplifier data here.
    if (notch_filter_frequency > 0)
        fprintf(1, 'Applying notch filter...\n');

        print_increment = 10;
        percent_done = print_increment;
        for i=1:num_h.amplifier_channels
            amplifier_data(i,:) = ...
                notch_filter(amplifier_data(i,:), h.sample_rate, notch_filter_frequency, 10);

            fraction_done = 100 * (i / num_h.amplifier_channels);
            if (fraction_done >= percent_done)
                fprintf(1, '%d%% done...\n', percent_done);
                percent_done = percent_done + print_increment;
            end

        end
    end

end

% Move variables to base workspace.
D = struct;
D.filename = file;
D.path = path;
D.amplifier_data = amplifier_data;
D.t_amplifier = t_amplifier;
D.frequency_parameters = frequency_parameters; % header somewhat duplicated here
D.header = h; % header

% Aux input channels
if (num_h.aux_input_channels > 0)
    if (data_present)
        D.aux_input_data = aux_input_data;
        D.t_aux_input = t_aux_input;
    end
end

% Supply voltage channels
if (num_h.supply_voltage_channels > 0)
    if (data_present)
        D.supply_voltage_data = supply_voltage_data;
        D.t_supply_voltage = t_supply_voltage;
    end
end

% Board ADC channels
if (num_h.board_adc_channels > 0)
    if (data_present)
        D.board_adc_data = board_adc_data;
        D.t_board_adc = t_board_adc;
    end
end

% Board digital input channels
if (num_h.board_dig_in_channels > 0)
    if (data_present)
        D.board_dig_in_data = board_dig_in_data;
        D.t_dig = t_dig;
    end
end

% Board digital output channels
if (num_h.board_dig_out_channels > 0)
    if (data_present)
        D.board_dig_out_data = board_dig_out_data;
        D.t_dig = t_dig;
    end
end

% Temp sensor channels
if (h.num_temp_sensor_channels > 0)
    if (data_present)
        D.temp_sensor_data = temp_sensor_data;
        D.t_temp_sensor = t_temp_sensor;
    end
end

fprintf(1, 'Done!  Elapsed time: %0.1f seconds\n', toc);
if (data_present)
    fprintf(1, 'Extracted data are now available.\n');
else
    fprintf(1, 'Extracted waveform information is now available.\n');
end
fprintf(1, '\n');

return


function a = fread_QString(fid)

% a = read_QString(fid)
%
% Read Qt style QString.  The first 32-bit unsigned number indicates
% the length of the string (in bytes).  If this number equals 0xFFFFFFFF,
% the string is null.

a = '';
length = fread(fid, 1, 'uint32');
if length == hex2num('ffffffff')
    return;
end
% convert length from bytes to 16-bit Unicode words
length = length / 2;

for i=1:length
    a(i) = fread(fid, 1, 'uint16');
end

return


function s = plural(n)

% s = plural(n)
% 
% Utility function to optionally plurailze words based on the value
% of n.

if (n == 1)
    s = '';
else
    s = 's';
end

return



